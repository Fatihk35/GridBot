Ürün Gereksinim Dokümanı (PRD) - Binance Spot Grid Bot Uygulaması
1. Giriş
Bu doküman, mevcut manuel grid bot stratejisinin Binance Spot borsasında işlem yapmak üzere TypeScript ile geliştirilecek bir konsol uygulamasına dönüştürülmesi için gereksinimleri tanımlar. Uygulama, belirlenen paritelerde ve bütçe dahilinde otomatik alım/satım işlemleri yapmayı, backtest, papertrade ve canlı ticaret modlarını desteklemeyi ve kullanıcıya konsol üzerinden anlık bilgilendirmeler ile detaylı raporları dosya formatında sağlamayı amaçlamaktadır.

2. Amaç
Manuel grid bot işlemlerini Binance Spot üzerinde otomatikleştirmek.

Piyasa koşullarına dinamik olarak adapte olabilen bir grid stratejisi uygulamak.

Farklı ticaret modları (backtest, papertrade, live) sunarak stratejinin test edilmesini ve güvenli bir şekilde uygulanmasını sağlamak.

Kullanıcıya konsol üzerinden anlık geri bildirimler ve Telegram üzerinden bildirimler sağlamak.

Tüm işlemlerin ve performans raporlarının detaylı bir şekilde dosyalara kaydedilmesini sağlamak.

Komisyon maliyetlerini optimize etmek ve kârlılığı artırmak.

3. Hedef Kitle
Mevcut grid bot stratejisini Binance Spot üzerinde otomatikleştirmek isteyen kripto para yatırımcıları.

Algoritmik ticaretle ilgilenen ve kendi stratejilerini test etmek isteyen geliştiriciler.

4. Fonksiyonel Gereksinimler
4.1. Ticaret Modları
Uygulama aşağıdaki ticaret modlarını destekleyecektir:

Backtest Modu: Geçmiş verilere dayanarak stratejinin performansını simüle eder.

Belirlenen tarih aralığı için geçmiş Binance Spot 1 dakikalık bar verilerini kullanır.

Simülasyon sonunda kar/zarar, işlem sayısı, Binance komisyonları dahil, detaylı bir rapor sunar.

Veri kaynağı olarak doğrudan Binance API'si veya harici (önceden indirilmiş) geçmiş veri (CSV, JSON) kullanılabilir.

Raporlama: Backtest sonuçları, özet istatistikler ve tüm simüle edilmiş işlemlerin listesi JSON ve/veya CSV formatında bir dosyaya yazılır.

Papertrade Modu (Demo Ticaret): Gerçek piyasa verileriyle ancak sanal parayla işlem yapar.

Binance API'sine bağlanır ancak emirleri gerçekten göndermez, sadece simüle eder.

Stratejinin canlı piyasa koşullarında nasıl performans gösterdiğini risksiz bir şekilde izlemeye olanak tanır.

Sanal bakiye yönetimi yapar ve sanal komisyonları hesaplar.

Raporlama: Papertrade süresince gerçekleşen tüm simüle edilmiş işlemler ve periyodik durum özetleri bir log dosyasına (örn. TXT veya JSON Lines) yazılır. Mod kapanışında özet bir rapor JSON formatında kaydedilir.

Live Modu (Canlı Ticaret): Gerçek piyasa verileriyle ve gerçek parayla Binance Spot üzerinde işlem yapar.

Binance Spot API'si üzerinden gerçek alım/satım emirleri gönderir.

Risk uyarısı ve onay mekanizması içerebilir (isteğe bağlı).

Raporlama: Canlı ticaret süresince gerçekleşen tüm gerçek işlemler ve periyodik durum özetleri bir log dosyasına (örn. TXT veya JSON Lines) yazılır. Uygulama durdurulduğunda veya belirli aralıklarla özet bir rapor JSON formatında kaydedilir.

4.2. Strateji Uygulaması
Uygulama, kullanıcının mevcut grid bot stratejisini aşağıdaki şekillerde uygulayacaktır:

Dinamik Grid Aralığı Belirleme:

Günlük Ortalama Bar Farkı Yöntemi: Belirlenen bar sayısının (varsayılan: 500) açılış-kapanış farklarının ortalamasına göre grid aralığı hesaplar.

Grid
Araligi=(Ortalama
Bar
Farki)/4

Eğer ortalama bar farkı belirli bir eşiğin altındaysa (örn. 0.20 USD/USDT), o paritede işlem açmaz.

ATR (Average True Range) Yöntemi: 1 dakikalık grafikteki ATR değerini doğrudan grid aralığı olarak kullanır. Bu yöntem varsayılan olarak tercih edilebilir.

Grid
Araligi=ATR

İşlem Miktarı Yönetimi:

Varsayılan olarak her işleme sabit 1000 USDT veya benzer bir stabilcoin değeriyle giriş yapar (JSON'da belirtilen bütçe para birimine göre).

DCA (Dollar-Cost Averaging) Entegrasyonu: Komisyon maliyetlerini optimize etmek için kademeli alım miktarları uygular:

%80 işlemde 1000 USDT'lik alım/satım.

%10 işlemde 3000 USDT'ye ulaşan alımlar.

%10 işlemde 4000 USDT'ye ulaşan alımlar.

Binance Minimum Ticaret Kriterleri: Belirlenen işlem miktarlarının Binance'in minimum emir büyüklüğü ve hassasiyet (precision) kurallarına uygunluğu kontrol edilecektir.

Fiyat Filtreleme ve Trend Durdurma:

Fiyatın belirlenen bir hareketli ortalamaya (örn. EMA200) yakınlığını kontrol eder. Fiyat, ortalamadan çok uzaklaştığında işlem yapmaz.

EMA200'ün %1 altında veya %1 üstünde işlemler durdurulur (potansiyel trend başlangıcı varsayımıyla).

Bu %1'lik bant içinde fiyat hareket ederken %100 pozisyona girilebilir.

Komisyon Optimizasyonu ve Kar Al:

Her işlemde brüt karın 4 grid aralığına denk gelmesi hedeflenir. Bunun 2 gridi komisyona ayrılır (Binance Spot komisyon oranları dikkate alınarak), 2 gridi ise net kar olarak hedeflenir.

Grid değerleri periyodik olarak (örn. 2 günde bir) yeniden hesaplanabilir ve kar/zarar sıfırlanabilir.

4.3. Giriş ve Yapılandırma
Uygulama, çalışacağı pariteleri, maksimum bütçeyi ve diğer yapılandırma ayarlarını JSON dosyası üzerinden okuyacaktır.

Örnek config.json:

JSON

{
  "tradeMode": "papertrade", // "backtest", "papertrade", "live"
  "exchange": "binance", // Sadece Binance desteklenecek
  "maxBudget": { "amount": 10000, "currency": "USDT" },
  "symbols": [
    { "pair": "BTC/USDT", "minDailyBarDiffThreshold": 0.20 },
    { "pair": "ETH/USDT", "minDailyBarDiffThreshold": 0.20 }
  ],
  "apiKeys": {
    "binanceApiKey": "YOUR_BINANCE_API_KEY",
    "binanceSecretKey": "YOUR_BINANCE_SECRET_KEY",
    "telegramBotToken": "YOUR_TELEGRAM_BOT_TOKEN",
    "telegramChatId": "YOUR_TELEGRAM_CHAT_ID"
  },
  "strategySettings": {
    "barCountForVolatility": 500, // Son N bar
    "minVolatilityPercentage": 0.30, // %0.30'dan fazla fark olan bar oranı
    "minVolatileBarRatio": 0.51, // %51'inden fazlası bu kritere uymalı
    "emaPeriod": 200,
    "emaDeviationThreshold": 0.01 // %1 sapma
  },
  "binanceSettings": {
    "testnet": false, // Gerçek ağ için false, test ağı için true
    "commissionRate": 0.001 // Varsayılan Binance Spot komisyon oranı (0.1%)
  },
  "logging": {
    "enableConsoleOutput": true,
    "enableTelegramOutput": true,
    "reportDirectory": "./reports", // Rapor dosyalarının kaydedileceği dizin
    "transactionLogFileName": "transactions.log"
  }
}
Kullanıcı, JSON dosyasını manuel olarak düzenleyecektir.

4.4. Çıkış ve Bildirimler
Konsol Çıkışı (Anlık Bilgilendirme):

Uygulama başlatıldığında yapılandırma özetini gösterir.

Gerçekleşen her alım/satım emri veya işlemi için anlık bilgi (parite, miktar, fiyat, zaman, işlem durumu, emir ID'si).

Strateji tarafından yapılan grid aralığı hesaplamaları ve değişiklikleri anlık olarak bildirilir.

Periyodik olarak (örn. her 10 barda bir veya her saat başı) güncel durum özeti (toplam kar/zarar, açık pozisyonlar, Binance bakiyeleri).

Hata, uyarı ve bilgilendirme mesajları (örn. Binance API bağlantı sorunları, yetersiz bakiye, işlem limitine takılma).

Telegram Bildirimleri:

Uygulamanın başlatılması/durdurulması.

Her gerçekleşen alım/satım işlemi (papertrade ve live modlarında).

Belirlenen önemli olaylar (örn. bütçenin kritik seviyeye gelmesi, API bağlantı sorunları, strateji durdurma).

Günlük/haftalık özet raporlar (isteğe bağlı).

Telegram API entegrasyonu (Node.js için node-telegram-bot-api gibi bir kütüphane kullanılabilir).

Dosyaya Raporlama:

İşlem Logları: Tüm modlarda (backtest, papertrade, live) gerçekleşen her alım/satım işlemi (simüle edilmiş veya gerçek) detaylı bilgilerle birlikte tarih damgalı bir log dosyasına (örn. transactions_[tarih].log veya transactions.jsonl) yazılır. Bu log, hata ayıklama ve detaylı analiz için kullanılabilir.

Performans Raporları:

Backtest için: Simülasyon sonunda kapsamlı bir rapor (kar/zarar, maksimum düşüş, Sharpe oranı, işlem sayısı, ortalama kar/işlem vb.) JSON ve/veya CSV formatında ayrı bir dosyaya kaydedilir (örn. backtest_report_[zamanDamgası].json).

Papertrade ve Live için: Uygulama durdurulduğunda veya manuel bir komutla, o seansın özet performans raporu (toplam kar/zarar, gerçekleşen işlemler, mevcut bakiyeler vb.) JSON formatında ayrı bir dosyaya kaydedilir (örn. papertrade_summary_[zamanDamgası].json, live_summary_[zamanDamgası].json).

4.5. Veri Yönetimi
Geçmiş Veri Çekimi: Backtest için Binance API'si üzerinden veya harici kaynaklardan (CSV, JSON) geçmiş 1 dakikalık bar verileri çekebilme yeteneği.

Gerçek Zamanlı Veri Akışı: Canlı ve Papertrade modları için Binance WebSocket API'sinden gerçek zamanlı 1 dakikalık bar verileri alabilme.

5. Non-Fonksiyonel Gereksinimler
Dil: TypeScript (Node.js ortamında çalışacak).

Performans: 1 dakikalık bar verilerini hızlı işleyebilme ve emirleri minimum gecikmeyle Binance'e gönderebilme.

Güvenilirlik: Binance API bağlantı hatalarını ve diğer beklenmedik durumları uygun şekilde ele alma (hata yakalama, yeniden deneme mekanizmaları, rate limiting yönetimi).

Güvenlik: API anahtarlarının güvenli bir şekilde saklanması (ortam değişkenleri veya .env dosyası kullanımı şiddetle önerilir). Binance API izinlerinin (sadece okuma/ticaret) en az ayrıcalık prensibine göre ayarlanması.

Esneklik: Kolayca yeni pariteler veya strateji parametreleri ekleyebilme.

Günlüğe Kayıt (Logging): Tüm uygulama akışının, işlemlerin, hataların ve önemli olayların düzenli bir şekilde bir log dosyasına kaydedilmesi (örn. winston gibi bir logging kütüphanesi kullanılabilir). Bu, raporlama loglarından farklı, daha teknik bir log olacaktır.

6. Teknik Tasarım Notları (Önerilen)
Borsa Entegrasyonu: Binance için özel bir servis veya node-binance-api gibi bir kütüphane kullanılabilir. ccxt gibi genel kütüphaneler de kullanılabilir ancak Binance'e özel optimizasyonlar gerekebilir.

Veri Yapıları: Bar verileri, emir defteri, pozisyon bilgileri, işlem kayıtları için uygun TypeScript arayüzleri/sınıfları tanımlanmalıdır.

Modüler Mimari:

BinanceService: Binance API ile etkileşimden (veri çekme, emir gönderme, bakiye sorgulama) sorumlu.

StrategyEngine: Grid stratejisi mantığını içerir.

DataFetcher: Geçmiş ve canlı veri çekme (Binance'e özel).

NotificationService: Konsol ve Telegram bildirimlerini yönetir.

ConfigLoader: JSON yapılandırma dosyasını yükler.

ReportService: Tüm modlar için raporlama ve dosya yazma işlemlerini yönetir.

Backtester: Backtest modunu çalıştırır.

PaperTrader: Papertrade modunu çalıştırır.

LiveTrader: Canlı ticaret modunu çalıştırır.

Zamanlayıcılar: Her 1 dakikada bir bar verisini işlemek ve stratejiyi tetiklemek için setInterval veya benzeri Node.js zamanlayıcıları kullanılabilir.

Hata Yönetimi: Binance API'den dönen özel hata kodları (örn. IP kısıtlaması, emir limitlemesi) için özel işleyiciler eklenecektir.

7. Geliştirme Takvimi (Tahmini)
Bu bölüm, geliştirme sürecinin aşamalarını ve tahmini süreleri içerir. (Gerçekçi bir takvim, detaylı analiz sonrası belirlenmelidir.)

Faz 1: Temel Uygulama ve Backtest (2-3 Hafta)

Proje altyapısının kurulması (TypeScript, Node.js).

config.json okuma ve temel yapılandırma.

Binance API'sinden geçmiş veri çekme mekanizması.

Temel grid aralığı hesaplama mantığı (ATR).

Backtest modunun geliştirilmesi ve detaylı raporların dosyaya yazılması.

Temel konsol bilgilendirmeleri.

Faz 2: Papertrade ve Canlı Entegrasyon (2-3 Hafta)

Binance Spot API entegrasyonu (alımlar/satımlar, bakiyeler, emir durumu sorgulama).

Papertrade modunun geliştirilmesi (sanal bakiye yönetimi, Binance kurallarına uygunluk).

Live modunun geliştirilmesi (gerçek emir gönderme, risk yönetimi).

Tüm işlemlerin ve periyodik durumların log dosyasına yazılması.

Gelişmiş konsol bilgilendirmeleri (anlık emir durumu).

Faz 3: Gelişmiş Strateji ve Bildirimler (1-2 Hafta)

DCA mekanizmasının entegrasyonu.

Fiyat filtreleme ve trend durdurma mantığı.

Telegram bildirimleri entegrasyonu.

Günlük/haftalık özet raporların Telegram'a ve dosyaya yazılması.

Binance Spot spesifik emir hassasiyeti ve minimum miktar kontrolleri.

Faz 4: Test ve İyileştirmeler (1 Hafta)

Kapsamlı birim ve entegrasyon testleri (özellikle Binance API etkileşimi ve dosya yazma işlemleri).

Performans optimizasyonları ve hata düzeltmeleri.

Genel iyileştirmeler ve dokümantasyon.