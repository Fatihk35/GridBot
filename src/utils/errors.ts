/** * Custom error classes and error handling utilities *//** * Configuration-related error */export class ConfigError extends Error {  public override readonly name = 'ConfigError';  constructor(    message: string,    public readonly code?: string | number,    public readonly details?: unknown  ) {    super(message);    Object.setPrototypeOf(this, ConfigError.prototype);  }}/** * Validation-related error */export class ValidateError extends Error {  public override readonly name = 'ValidateError';  constructor(    message: string,    public readonly field?: string,    public readonly expected?: string,    public readonly received?: string  ) {    super(message);    Object.setPrototypeOf(this, ValidateError.prototype);  }}/** * API-related error */export class ApiError extends Error {  public override readonly name = 'ApiError';  constructor(    message: string,    public readonly statusCode?: number,    public readonly endpoint?: string,    public readonly response?: unknown  ) {    super(message);    Object.setPrototypeOf(this, ApiError.prototype);  }}/** * Error handler utility functions */export class ErrorHandler {  /**   * Check if error is a configuration error   * @param error - Error to check   * @returns True if configuration error   */  public static isConfigError(error: unknown): error is ConfigError {    return error instanceof ConfigError;  }  /**   * Check if error is a validation error   * @param error - Error to check   * @returns True if validation error   */  public static isValidateError(error: unknown): error is ValidateError {    return error instanceof ValidateError;  }  /**   * Check if error is an API error   * @param error - Error to check   * @returns True if API error   */  public static isApiError(error: unknown): error is ApiError {    return error instanceof ApiError;  }  /**   * Get error type name   * @param error - Error to check   * @returns Error type name   */  public static getErrorType(error: Error): string {    return error.constructor.name;  }  /**   * Format error for logging or display   * @param error - Error to format   * @returns Formatted error string   */  public static formatError(error: Error): string {    const type = this.getErrorType(error);    let formatted = `${type}: ${error.message}`;    if (this.isConfigError(error)) {      if (error.code) {        formatted += ` (Code: ${error.code})`;      }      if (error.details) {        formatted += ` | Details: ${JSON.stringify(error.details)}`;      }    } else if (this.isValidateError(error)) {      if (error.field) {        formatted += ` | Field: ${error.field}`;      }      if (error.expected) {        formatted += ` | Expected: ${error.expected}`;      }      if (error.received) {        formatted += ` | Received: ${error.received}`;      }    } else if (this.isApiError(error)) {      if (error.statusCode) {        formatted += ` | Status: ${error.statusCode}`;      }      if (error.endpoint) {        formatted += ` | Endpoint: ${error.endpoint}`;      }      if (error.response) {
        formatted += ` | Response: ${JSON.stringify(error.response)}`;
      }
    }

    if (error.stack) {
      formatted += `\nStack: ${error.stack}`;
    }

    return formatted;
  }
}
